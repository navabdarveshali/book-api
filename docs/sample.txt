returnBook : async (id) => {
    try {
        // Step 1: Fetch the due date and user email
        const sql = 'SELECT due_date, user_id FROM borrows WHERE id = ?';
        const results = await new Promise((resolve, reject) => {
            connection.query(sql, [id], (err, results) => {
                if (err) return reject(err);
                resolve(results);
            });
        });

        if (results.length === 0) {
            throw new Error('Borrow record not found.');
        }

        const dueDate = new Date(results[0].due_date);

        // Step 2: Calculate the late fee
        const lateFee = calculateLateFee(dueDate);

        // Step 3: Update the borrow record
        const updateSql = 'UPDATE borrows SET returned_date = NOW(), late_fee = ? WHERE id = ?';
        await new Promise((resolve, reject) => {
            connection.query(updateSql, [lateFee, id], (err, results) => {
                if (err) return reject(err);
                resolve(results);
            });
        });
    } catch (error) {
        console.error('Error returning book:', error);
        return { success: false, message: error.message };
    }
},






 // Function to return a borrowed book
    returnBook: (id) => {
        const sql = 'UPDATE borrows SET return_date = NOW() WHERE id= ?';
        return new Promise((resolve, reject) => {
            connection.query(sql, [id], (err, results) => {
                if (err) {
                    return reject(err);
                }
                resolve(results.affectedRows);
            });
        });
    },